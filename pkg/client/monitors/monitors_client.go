// Code generated by go-swagger; DO NOT EDIT.

package monitors

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new monitors API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new monitors API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new monitors API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for monitors API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// This client is generated with a few options you might find useful for your swagger spec.
//
// Feel free to add you own set of options.

// WithContentType allows the client to force the Content-Type header
// to negotiate a specific Consumer from the server.
//
// You may use this option to set arbitrary extensions to your MIME media type.
func WithContentType(mime string) ClientOption {
	return func(r *runtime.ClientOperation) {
		r.ConsumesMediaTypes = []string{mime}
	}
}

// WithContentTypeApplicationJSON sets the Content-Type header to "application/json".
func WithContentTypeApplicationJSON(r *runtime.ClientOperation) {
	r.ConsumesMediaTypes = []string{"application/json"}
}

// WithContentTypeApplicationxYaml sets the Content-Type header to "application/x-yaml".
func WithContentTypeApplicationxYaml(r *runtime.ClientOperation) {
	r.ConsumesMediaTypes = []string{"application/x-yaml"}
}

// WithAccept allows the client to force the Accept header
// to negotiate a specific Producer from the server.
//
// You may use this option to set arbitrary extensions to your MIME media type.
func WithAccept(mime string) ClientOption {
	return func(r *runtime.ClientOperation) {
		r.ProducesMediaTypes = []string{mime}
	}
}

// WithAcceptApplicationJSON sets the Accept header to "application/json".
func WithAcceptApplicationJSON(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/json"}
}

// WithAcceptApplicationxYaml sets the Accept header to "application/x-yaml".
func WithAcceptApplicationxYaml(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/x-yaml"}
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateMonitor(params *CreateMonitorParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateMonitorOK, error)

	CreateSilence(params *CreateSilenceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateSilenceOK, error)

	DeleteMonitor(params *DeleteMonitorParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteMonitorOK, error)

	DeleteSilence(params *DeleteSilenceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteSilenceOK, error)

	GetAllSilences(params *GetAllSilencesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllSilencesOK, error)

	GetMonitor(params *GetMonitorParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetMonitorOK, error)

	GetSilence(params *GetSilenceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSilenceOK, error)

	ListMonitors(params *ListMonitorsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListMonitorsOK, error)

	UpdateMonitor(params *UpdateMonitorParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateMonitorAccepted, error)

	UpdateSilence(params *UpdateSilenceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateSilenceOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateMonitor Create Monitor
*/
func (a *Client) CreateMonitor(params *CreateMonitorParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateMonitorOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateMonitorParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createMonitor",
		Method:             "POST",
		PathPattern:        "/api/monitors",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/x-yaml"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateMonitorReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateMonitorOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createMonitor: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateSilence creates silence

Creates a new silence for monitoring alerts.
*/
func (a *Client) CreateSilence(params *CreateSilenceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateSilenceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateSilenceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createSilence",
		Method:             "POST",
		PathPattern:        "/api/monitors/silences",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateSilenceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateSilenceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createSilence: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteMonitor Delete Monitor
*/
func (a *Client) DeleteMonitor(params *DeleteMonitorParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteMonitorOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteMonitorParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteMonitor",
		Method:             "DELETE",
		PathPattern:        "/api/monitors/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteMonitorReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteMonitorOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteMonitor: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteSilence deletes silence

Deletes a silence by its UUID.
*/
func (a *Client) DeleteSilence(params *DeleteSilenceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteSilenceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSilenceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteSilence",
		Method:             "DELETE",
		PathPattern:        "/api/monitors/silences/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteSilenceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteSilenceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteSilence: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAllSilences gets all silences

Retrieves all silences with optional filtering.
*/
func (a *Client) GetAllSilences(params *GetAllSilencesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllSilencesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllSilencesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllSilences",
		Method:             "GET",
		PathPattern:        "/api/monitors/silences",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetAllSilencesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllSilencesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllSilences: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetMonitor Get Monitor Definition (YAML)
*/
func (a *Client) GetMonitor(params *GetMonitorParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetMonitorOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMonitorParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getMonitor",
		Method:             "GET",
		PathPattern:        "/api/monitors/{id}",
		ProducesMediaTypes: []string{"application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetMonitorReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetMonitorOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getMonitor: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetSilence gets silence by ID

Retrieves a specific silence by its UUID.
*/
func (a *Client) GetSilence(params *GetSilenceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSilenceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSilenceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getSilence",
		Method:             "GET",
		PathPattern:        "/api/monitors/silences/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetSilenceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSilenceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSilence: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListMonitors List Monitors
*/
func (a *Client) ListMonitors(params *ListMonitorsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListMonitorsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListMonitorsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listMonitors",
		Method:             "POST",
		PathPattern:        "/api/monitors/list",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListMonitorsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListMonitorsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listMonitors: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateMonitor Update Monitor
*/
func (a *Client) UpdateMonitor(params *UpdateMonitorParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateMonitorAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateMonitorParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateMonitor",
		Method:             "PUT",
		PathPattern:        "/api/monitors/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/x-yaml"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateMonitorReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateMonitorAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateMonitor: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateSilence updates silence

Updates an existing silence by its UUID.
*/
func (a *Client) UpdateSilence(params *UpdateSilenceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateSilenceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateSilenceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateSilence",
		Method:             "PUT",
		PathPattern:        "/api/monitors/silences/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateSilenceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateSilenceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateSilence: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
